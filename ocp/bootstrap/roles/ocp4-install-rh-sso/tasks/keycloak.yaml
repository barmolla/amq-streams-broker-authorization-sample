- name: Create RH SSO Namespaces
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'namespaces.yaml.j2') }}"

- name: Create Installation State Config Mapping
  shell: |
    INSTALLATION_CM_PRESENT=$(oc -n keycloak get cm cm-installation-state -o name)

    if [ -z "$INSTALLATION_CM_PRESENT" ];
    then
      echo "Creating installation state config mapping"
      oc -n keycloak apply -f {{ role_path }}/templates/cm-installation-state.yaml
    else
      echo "installation state config mapping already exists"
    fi
  register: cm_installation_state_result

- debug: msg="{{ cm_installation_state_result.stdout }}"

- name: Install RH SSO Operator
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'subs-keycloak.yaml.j2') }}"

- name: Wait for RH SSO CRD to exist
  kubernetes.core.k8s_info:
    api_version: "apiextensions.k8s.io/v1"
    kind: CustomResourceDefinition
    name: "{{ item }}"
  loop: "{{ keycloak_expected_crds }}"
  register: crds
  until: crds.resources|length > 0
  retries: 30
  delay: 10

- name: Pause for 10 seconds to let deployment resources to be added
  pause:
    seconds: 10

- name: Wait for RH SSO Operator to be available
  shell: |
    oc -n keycloak wait --for=condition=Ready pods --timeout=360s --selector name=rhsso-operator

- name: Install RH SSO Keycloak Instance
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'keycloak.yaml.j2') }}"

- name: Pause for 120 seconds to let deployment resources to be added
  pause:
    seconds: 120

- name: Wait for Keycloak Pods to be ready
  shell: |
    oc -n keycloak wait --for=condition=Ready pods --timeout=360s --selector app=keycloak
  register: keycloak_pods_ready

- name: Update Keycloak Credentials Secret
  shell: |
    oc -n keycloak patch secret credential-keycloak --type='json' -p='[{"op" : "replace" ,"path" : "/data/ADMIN_PASSWORD" ,"value" : "YWRtaW4="}]'

- name: Create Kafka-Authz Keycloak Realm
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'keycloak-realm.yaml.j2') }}"

- name: Import Keycloak resources
  shell: |
    RESOURCES_IMPORTED=$(oc -n keycloak get cm cm-installation-state -o jsonpath='{ .data.resources_imported }')
    KEYCLOAK_POD=keycloak-0
    REALM=kafka-authz

    if [ -z "$RESOURCES_IMPORTED" ];
    then
      echo "Importing Keycloak resources"
      echo "value 2: $RESOURCES_IMPORTED"

      oc -n keycloak cp "{{ role_path }}/files/10-kafka-authz-realm.json" $KEYCLOAK_POD:/tmp
      oc -n keycloak cp "{{ role_path }}/files/11-kafka-authz-realm.json" $KEYCLOAK_POD:/tmp
      oc -n keycloak cp "{{ role_path }}/files/12-kafka-authz-realm.json" $KEYCLOAK_POD:/tmp

      oc -n keycloak exec -ti $KEYCLOAK_POD -- /bin/bash -c "/opt/eap/bin/kcadm.sh config credentials --server http://localhost:8080/auth --realm master --user admin --password admin"
      oc -n keycloak exec -ti $KEYCLOAK_POD -- /bin/bash -c "/opt/eap/bin/kcadm.sh create partialImport -r $REALM -s ifResourceExists=SKIP -o -f /tmp/10-kafka-authz-realm.json"
      oc -n keycloak exec -ti $KEYCLOAK_POD -- /bin/bash -c "/opt/eap/bin/kcadm.sh create partialImport -r $REALM -s ifResourceExists=SKIP -o -f /tmp/11-kafka-authz-realm.json"
      oc -n keycloak exec -ti $KEYCLOAK_POD -- /bin/bash -c "/opt/eap/bin/kcadm.sh create partialImport -r $REALM -s ifResourceExists=SKIP -o -f /tmp/12-kafka-authz-realm.json"

      oc -n keycloak patch cm cm-installation-state --type='json' -p='[{"op" : "replace" ,"path" : "/data/resources_imported" ,"value" : "true"}]'  
    else
      echo "Keycloak resources already imported"
    fi
  register: import_keycloak_resources_result

- debug: msg="{{ import_keycloak_resources_result.stdout }}"

- name: Update Keycloak TLS certs
  shell: |
    CERTS_UPDATED=$(oc -n keycloak get cm cm-installation-state -o jsonpath='{ .data.certs_updated }')
    CERTS_PATH={{ playbook_dir }}/roles/generate-certs/files/out
    if [ -z "$CERTS_UPDATED" ];
    then
      echo "Updating Keycloak certs"

      oc -n keycloak delete secret sso-x509-https-secret
      oc -n keycloak create secret tls sso-x509-https-secret --cert=$CERTS_PATH/keycloak.crt --key=$CERTS_PATH/keycloak.key

      oc -n keycloak patch cm cm-installation-state --type='json' -p='[{"op" : "replace" ,"path" : "/data/certs_updated" ,"value" : "true"}]' 
    else
      echo "Keycloak certs already updated"
    fi
  register: update_keycloak_certs_result

- debug: msg="{{ update_keycloak_certs_result.stdout }}"