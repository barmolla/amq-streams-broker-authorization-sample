- name: Create RH SSO Namespaces
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'namespaces.yaml.j2') }}"

- name: Create Installation State Config Mapping
  shell: |
    INSTALLATION_CM_PRESENT=$(oc -n keycloak get cm cm-installation-state -o name)

    if [ -z "$INSTALLATION_CM_PRESENT" ];
    then
      echo "Creating installation state config mapping"
      oc -n keycloak apply -f {{ role_path }}/templates/cm-installation-state.yaml
    else
      echo "installation state config mapping already exists"
    fi
  register: cm_installation_state_result

- debug: msg="{{ cm_installation_state_result.stdout }}"

- name: Create Postgresql Application Instance
  shell: |
    POSTGRES_APP_CREATED=$(oc -n keycloak get cm cm-installation-state -o jsonpath='{ .data.postgres_app_created }')

    if [ -z "$POSTGRES_APP_CREATED" ];
    then
      echo "Creating Postgresql Application Instance"
      oc new-app postgresql-persistent -p=NAMESPACE=openshift -p=DATABASE_SERVICE_NAME=postgres -p=POSTGRESQL_USER=postgres -p=POSTGRESQL_PASSWORD=postgres -p=POSTGRESQL_DATABASE=keycloakdb -p=POSTGRESQL_VERSION=13-el8 --as-deployment-config=false

      echo "Patch configuration map"
      oc -n keycloak patch cm cm-installation-state --type='json' -p='[{"op" : "replace" ,"path" : "/data/postgres_app_created" ,"value" : "true"}]' 
    else 
      echo "postgresql application instance already created"
    fi
  register: postgres_app_created_result

- debug: msg="{{ postgres_app_created_result.stdout }}"

- name: Wait for Postgresql Pod to Finish Creation
  shell: |
      echo "Pause for 20 seconds"
      sleep 20

      echo "Wait for Postgresql Pod to finish creation"
      oc wait --for=condition=Ready pods --timeout=720s --selector name=postgres
  register: postgresql_pod_created_result

- debug: msg="{{ postgresql_pod_created_result.stdout }}"

- name: Create keycloakdb Database Schema
  shell: |
    DATABASE_SCHEMA_CREATED=$(oc -n keycloak get cm cm-installation-state -o jsonpath='{ .data.database_schema_created }')

    if [ -z "$DATABASE_SCHEMA_CREATED" ];
    then

      echo "Creating keycloakdb Schema"
      POSTGRES_POD=$(oc -n keycloak get po --selector=name=postgres -o jsonpath={..metadata.name})
      oc -n keycloak exec -ti $POSTGRES_POD -- /bin/bash -c 'PGPASSWORD=postgres psql -U postgres -c "CREATE DATABASE keycloakdb WITH TEMPLATE template0 ENCODING utf8"'

      echo "Patch configuration map"
      oc -n keycloak patch cm cm-installation-state --type='json' -p='[{"op" : "replace" ,"path" : "/data/database_schema_created" ,"value" : "true"}]' 
    else 
      echo "Keycloak Database Schema already created"
    fi
  register: database_schema_created_result    

- debug: msg="{{ database_schema_created_result.stdout }}"

- name: Install RH SSO Keycloak Postgresql Secret
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'keycloak-db-secret.yaml.j2') }}"

- name: Install RH SSO Operator
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'subs-keycloak.yaml.j2') }}"

- name: Wait for RH SSO CRD to exist
  kubernetes.core.k8s_info:
    api_version: "apiextensions.k8s.io/v1"
    kind: CustomResourceDefinition
    name: "{{ item }}"
  loop: "{{ keycloak_expected_crds }}"
  register: crds
  until: crds.resources|length > 0
  retries: 30
  delay: 10

- name: Pause for 120 seconds to let deployment resources to be added
  pause:
    seconds: 120

- name: Wait for RH SSO Operator to be available
  shell: |
    oc -n keycloak wait --for=condition=Ready pods --timeout=360s --selector name=rhsso-operator

- name: Install RH SSO Keycloak Instance
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'keycloak.yaml.j2') }}"

- name: Pause for 120 seconds to let deployment resources to be added
  pause:
    seconds: 120

- name: Wait for Keycloak Pods to be ready
  shell: |
    oc -n keycloak wait --for=condition=Ready pods --timeout=360s --selector app=keycloak
  register: keycloak_pods_ready

- name: Update Keycloak Credentials Secret
  shell: |
    oc -n keycloak patch secret credential-keycloak --type='json' -p='[{"op" : "replace" ,"path" : "/data/ADMIN_PASSWORD" ,"value" : "YWRtaW4="}]'

- name: Create Kafka-Authz Keycloak Realm
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'keycloak-realm.yaml.j2') }}"

- name: Import Keycloak resources
  shell: |
    RESOURCES_IMPORTED=$(oc -n keycloak get cm cm-installation-state -o jsonpath='{ .data.resources_imported }')
    KEYCLOAK_POD=keycloak-0
    REALM=kafka-authz

    if [ -z "$RESOURCES_IMPORTED" ];
    then
      echo "Importing Keycloak resources"

      oc -n keycloak cp "{{ role_path }}/files/10-kafka-authz-realm.json" $KEYCLOAK_POD:/tmp
      oc -n keycloak cp "{{ role_path }}/files/11-kafka-authz-realm.json" $KEYCLOAK_POD:/tmp
      oc -n keycloak cp "{{ role_path }}/files/12-kafka-authz-realm.json" $KEYCLOAK_POD:/tmp
      oc -n keycloak cp "{{ role_path }}/files/20-kafka-authz-realm-kafka-client.json" $KEYCLOAK_POD:/tmp

      oc -n keycloak expose pod keycloak-0 --port=8080 --target-port=8080 --name=keycloak-http
      oc -n keycloak exec -ti $KEYCLOAK_POD -- /bin/bash -c "/opt/eap/bin/kcadm.sh config credentials --server http://keycloak-http.keycloak:8080/auth --realm master --user admin --password admin"
      oc -n keycloak exec -ti $KEYCLOAK_POD -- /bin/bash -c "/opt/eap/bin/kcadm.sh create partialImport -r $REALM -s ifResourceExists=SKIP -o -f /tmp/10-kafka-authz-realm.json"
      oc -n keycloak exec -ti $KEYCLOAK_POD -- /bin/bash -c "/opt/eap/bin/kcadm.sh create partialImport -r $REALM -s ifResourceExists=SKIP -o -f /tmp/11-kafka-authz-realm.json"
      oc -n keycloak exec -ti $KEYCLOAK_POD -- /bin/bash -c "/opt/eap/bin/kcadm.sh create partialImport -r $REALM -s ifResourceExists=SKIP -o -f /tmp/12-kafka-authz-realm.json"

      # Sync Ldap Users
      oc -n keycloak exec -ti $KEYCLOAK_POD -- /bin/bash -c "/opt/eap/bin/kcadm.sh create components -r $REALM -s name=ldap -s providerId=ldap -s providerType=org.keycloak.storage.UserStorageProvider -s 'config.editMode=[\"WRITABLE\"]' -s 'config.syncRegistrations=[\"false\"]' -s 'config.vendor=[\"rhds\"]' -s 'config.usernameLDAPAttribute=[\"uid\"]' -s 'config.rdnLDAPAttribute=[\"uid\"]' -s 'config.uuidLDAPAttribute=[\"uid\"]' -s 'config.userObjectClasses=[\"inetOrgPerson\"]' -s 'config.connectionUrl=[\"ldap://openldap-server.openldap:389\"]'  -s 'config.usersDn=[\"ou=users,dc=example,dc=com\"]' -s 'config.authType=[\"simple\"]' -s 'config.bindDn=[\"cn=Manager,dc=example,dc=com\"]' -s 'config.bindCredential=[\"admin\"]'"
      LDAP_COMPONENT=$(oc -n keycloak exec -it $KEYCLOAK_POD -- /bin/bash -c "/opt/eap/bin/kcadm.sh get components -r $REALM -q type=org.keycloak.storage.UserStorageProvider"  | jq '.[] | .id'  | sed -e 's/^"//' -e 's/"$//')
      oc -n keycloak exec -ti $KEYCLOAK_POD -- /bin/bash -c "/opt/eap/bin/kcadm.sh create -r $REALM user-storage/$LDAP_COMPONENT/sync?action=triggerFullSync"
      
      # Synch Ldap Groups
      oc -n keycloak exec -ti $KEYCLOAK_POD -- /bin/bash -c "/opt/eap/bin/kcadm.sh create components -r $REALM   -s name=ldap-groups -s providerId=group-ldap-mapper -s providerType=org.keycloak.storage.ldap.mappers.LDAPStorageMapper -s parentId=$LDAP_COMPONENT  -s 'config.\"groups.dn\"=[\"ou=groups,dc=example,dc=com\"]' -s 'config.\"group.name.ldap.attribute\"=[\"cn\"]' -s 'config.\"group.object.classes\"=[\"groupOfUniqueNames\"]' -s 'config.\"preserve.group.inheritance\"=[\"true\"]' -s 'config.\"membership.ldap.attribute\"=[\"uniqueMember\"]' -s 'config.\"membership.attribute.type\"=[\"DN\"]' -s 'config.\"groups.ldap.filter\"=[]' -s 'config.mode=[\"LDAP_ONLY\"]' -s 'config.\"user.roles.retrieve.strategy\"=[\"LOAD_GROUPS_BY_MEMBER_ATTRIBUTE\"]' -s 'config.membership=[\"memberOf\"]'"
      LDAP_GROUP_COMPONENT=$(oc -n keycloak exec -it $KEYCLOAK_POD -- /bin/bash -c "/opt/eap/bin/kcadm.sh get components -r $REALM  -q name=ldap-groups"  | jq '.[] | .id'  | sed -e 's/^"//' -e 's/"$//')
      oc -n keycloak exec -ti $KEYCLOAK_POD -- /bin/bash -c "/opt/eap/bin/kcadm.sh create -r $REALM user-storage/$LDAP_COMPONENT/mappers/$LDAP_GROUP_COMPONENT/sync?direction=fedToKeycloak"
      
      oc -n keycloak exec -ti $KEYCLOAK_POD -- /bin/bash -c "/opt/eap/bin/kcadm.sh create partialImport -r $REALM -s ifResourceExists=OVERWRITE -o -f /tmp/20-kafka-authz-realm-kafka-client.json"
      
      oc -n keycloak patch cm cm-installation-state --type='json' -p='[{"op" : "replace" ,"path" : "/data/resources_imported" ,"value" : "true"}]' 
    else
      echo "Keycloak resources already imported"
    fi
  register: import_keycloak_resources_result

- debug: msg="{{ import_keycloak_resources_result.stdout }}"
